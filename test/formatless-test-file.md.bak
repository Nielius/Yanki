Merge two dictionaries into one, using unpacking.
unpack with `{**x, **y}`
(where `x` and `y` are dictionaries)

Check if a key `k` is in a dictionary `x`.
`k in x`.

Loop over all keys in a dictionary `x`.
`for k in x.items()`

Loop over all (key,value) pairs of a dictionary `x`.
`for k, v in x.items()`

Return the last item of a list.
``` python
a[-1]
```

What is python's equivalent of null?
`None`.

How do you test if something is null?
`v is None`.

Find the length of a list.
`len(l) # l a list`

Sort a list.
`l.sort() # l a list; destructive (changes the list)`

What does `a = []` and then `a[10]` give?
``` python
a = []
# raises IndexError:
a[10]
# raises IndexError:
a[10] = 'lorem'
```

Find the index of an element in a list.
```python
a = ['x', 'y', 'y', 'z']

# raises ValueError if not found:
a.index('y')
```

Get element index in array after i and before j.
`s.index(x, i, j)`

Count occurences of `x` in list `s`.
`s.count(x)`

Get min/max in list.
`min(s); max(s)`

Slice with steps.
`s[i:j;k]; s[i::k]`

Concatenate two lists.
``` python
a = [1, 2, 3]
a2 = a + [4, 5, 6]
a.extend([4, 5, 6])
```

Manipulate back of an array.
```python
a = [6, 7, 8]
a.append(9)
a.pop() 	$a = [6, 7, 8];
```

Manipulate front of an aray.
``` python
a = [6, 7, 8]
a.insert(0, 5)
a.pop(0)
```

Iterate over pairs of index and element in a list.
```python
a = ['do', 're', 'mi', 'fa']
for i, s in enumerate(a):
  print('%s at index %d' % (s, i)) 
```

Test membership of a list.
`7 in a` (where `a` is a list).


Make a deep copy of a list.
``` python
import copy
a = [1,2,[3,4]]
a2 = a
a3 = list(a)
a4 = copy.deepcopy(a)
```

Read a line from stdin.
``` python
line = sys.stdin.readline()
s = line.rstrip('\r\n')
```

Write to stderr.
``` python
 	sys.stderr.write('bam!\n')
```

Open a file for reading, using `utf-8`.
``` python
 	f = open('/etc/hosts', encoding='utf-8')
```

Open a file for binary reading.
``` python
f = open('/etc/hosts', 'rb')
```

Read a line from a file.
``` python
f.readline()
```

Loop over all lines in a files.
``` python
for line in f:
  print(line)
```

Get all lines in a file from as a generator object.
``` python
f.readlines()
```


Read an entire file into a string.
``` python
s = f.read()
```


Read a fixed length in a file.
``` python
s = f.read(100)
```


Read serialized data.
``` python
import pickle

with open('/tmp/data.pickle', 'rb') as f:
  data = pickle.load(f)
```

Open a file for appending, binary writing, writing `utf-8`.
``` python
f = open('/tmp/err.log', 'a')
f = open('/tmp/test', 'wb')
f = open('/tmp/test', 'w'
  encoding='utf-8')
```

Go to a certain position in a file.
``` python
f.tell()
f.seek(0)
```

Check (1) if a path exists; and (2) if it is a file.
``` python
os.path.exists('/etc/hosts')
os.path.isfile('/etc/hosts')
```

Get the command line arguments and the script name.
``` python
sys.argv[1:]
sys.argv[0]
```

Load a library from a subdirectory.
``` python
# foo must contain __init__.py file
import foo.bar
```

Import everything from a library.
`from mylib import *`.

Load a library from a specific path.
``` python
sys.path.append('/some/path')
```

Rename namespaces and idenitifers of imports.
``` python
# rename namespace:
import foo as fu
# rename identifier:
from sys import path as the_path
```


Create new instances of a class.
``` python
i = Int()
i2 = Int(7)
```

Define a class variable.
``` python
class Foo:
  instances = 0
```

Get and set class variables.
``` python
 	class Foo:
  def init(self):
    Foo.instances += 1
```

Write a class destructor.
``` python
 	def __del__(self):
        print('bye, %d' % self.value)
```

Write a subclass.
``` python
class Counter(Int):

  instances = 0

  def __init__(self, v=0):
    Counter.instances += 1
    Int.__init__(self, v)

  def incr(self):
    self.value += 1
```

Inspect a class: get the class of a class instance, and give a function to check whether an object is an instance of a specific class.
``` python
o.__class__ == Foo
isinstance(o, Foo)
```

List the basic types in python.
``` python
NoneType
bool
int
long
float
str
SRE_Pattern
datetime
list
array
dict
object
file
```

Inspect class hierarchy.
``` python
o.__class__.__bases__
```

Check if an object has a specific method.
``` python
hasattr(o, 'reverse')
```

List all attributes of an object.
``` python
 	dir(o)
```

List all loaded namespaces.
``` python
dir()
```

Inspect a given namespace.
``` python
import urlparse

dir(urlparse)
```

Get the doc string.
``` python
o.__doc__

# Or:
import inspect
inspect.getdoc(o)
```

Get the source of an object.
``` python
import inspect
inspect.getsource(o)
# getsourcefile getsourcelines also work
```

Construct a generator `firstn(n)` for the first n integers.
``` python
def firstn(n):
    num = 0
    while num < n:
        yield num
        num += 1
```

Profile a script.
`python -m cProfile -o <out.profile> <script>`

How do you unpack an argument list or a dictionary? (Pass the elements of a list as arguments to a function.)
Using `*` for the list and `**` for the dictionary (which becomes keyword arguments).

How do you define a function that takes an arbitrary number of arguments? And an arbitrary number of keyword arguments? (Variadic functions; variable number of arguments.)
```python
def cheeseshop(kind, *arguments, **keywords):
    print("-- Do you have any", kind, "?")
    print("-- I'm sorry, we're all out of", kind)
    for arg in arguments:
        print(arg)
    print("-" * 40)
    for kw in keywords:
        print(kw, ":", keywords[kw])

cheeseshop("Limburger", "It's very runny, sir.",
           "It's really very, VERY runny, sir.",
           shopkeeper="Michael Palin",
           client="John Cleese",
           sketch="Cheese Shop Sketch")
```

How do you define a decorator?
You define a function that returns a function.
```python
def cheeseshop(kind, *arguments, **keywords):
    print("-- Do you have any", kind, "?")
    print("-- I'm sorry, we're all out of", kind)
    for arg in arguments:
        print(arg)
    print("-" * 40)
    for kw in keywords:
        print(kw, ":", keywords[kw])

cheeseshop("Limburger", "It's very runny, sir.",
           "It's really very, VERY runny, sir.",
           shopkeeper="Michael Palin",
           client="John Cleese",
           sketch="Cheese Shop Sketch")
```


How do you use a decorator?
You define a function `mydecorator` that returns a function.
Then you use it as follows:
```python
@mydecorator
def decoratedFunction():
	...
```

What is the `@`-syntax before a function definition?
Decorators.

How do generators work? (In particular, how do you use and define them?)
Generators are a kind of iterators.
You define them as you would define a function,
but instead of a return, it has a `yield`:
this gives the generated value.
Generating the next value means that the function continues where it left when `yield` was called.

What are generator expressions?
`generator = (i*i for i in range(a, b))`

How do you implement an interator class?
To add iterator behaviour to a class,
you define a `__iter__()` method,
which return an object which needs to have a `__next__()` method.
If the class itself has a `__next__()` method,
you can simply define `__iter__()` as the function that returns `self`.

How do you do multiple inheritance in python?
`class DerivedClassName(Base1, Base2, Base3):`


How do you map a function over a list in python? (Two ways.)
``` python
map(lambda x: x * x, [1, 2, 3])
# or use list comprehension:
[x * x for x in [1, 2, 3]]   
```

How do you filter a list? (Two ways.)
``` python
filter(lambda x: x > 1, [1, 2, 3])
# or use list comprehension:
[x for x in [1, 2, 3] if x > 1] 	
```

How do you reduce a list in python?
``` python
# import needed in Python 3 only
from functools import reduce

reduce(lambda x, y: x + y, [1, 2, 3], 0)
```

How do you do universal and existential test?
```python
all(i % 2 == 0 for i in [1, 2, 3, 4])
any(i % 2 == 0 for i in [1, 2, 3, 4])
```


How do you do variable interpolation in strings?
``` python
count = 3
item = 'ball'
print('{count} {item}s'.format(
  **locals()))
  
# Python 3.6:
print(f'{count} {item}s')
```

How do you do expression interpolation in strings?
```python
'1 + 1 = {}'.format(1 + 1)

# Python 3.6:
f'1 + 1 = {1 + 1}'
```

How do you do string formatting?
```python
'lorem %s %d %f' % ('ipsum', 13, 3.7)

fmt = 'lorem {0} {1} {2}'
fmt.format('ipsum', 13, 3.7)
```

Format a float.
`f'{math.pi:.{3}}'`

Convert a number to a string.
`'value: ' + str(8)`

Join a list of strings.
`' '.join(['do', 're', 'mi', 'fa'])`

Get dict key with default, to avoid KeyError.
`d.get('t', None)`

Check if is key present in a dictionary.
`'y' in d`

Delete an entry of a dictionary.
`d = {1: True, o: False}; del d[1]`

Merge two dictionaries.
`d1.update(d2)`

Iterate over key, value of dictionary.
`for k, v in d.items(): print('value at {} is {}'.format(k, v)`

Dictionary comprehension.
`to_let = {v: k for k, v in to_num.items()}`

Get keys and values of a dictionary `d` as iterators.
`d.keys(); d.values()`

Create dictionary from lists.
```python
a = [['a', 1], ['b', 2], ['c', 3]]
d = dict(a)

a = ['a', 1, 'b', 2, 'c', 3]
d = dict(zip(a[::2], a[1::2]))
```

Dictionaries with default values.
``` python
from collections import defaultdict

counts = defaultdict(lambda: 0)
counts['foo'] += 1

class Factorial(dict):
  def __missing__(self, k):
    if k > 1:
      return k * self[k-1]
    else:
      return 1

factorial = Factorial()
```

Define a function with private state.
```python
# state not private:
def counter():
  counter.i += 1
  return counter.i

counter.i = 0
print(counter())
```

Define a (function) closure.
``` python
def make_counter():
  i = 0
  def counter():
    # new in Python 3:
    nonlocal i
    i += 1
    return i
  return counter

nays = make_counter()
print(nays())
```

Invoke operators like a function.
```python
import operator

operator.mul(3, 7)

a = ['foo', 'bar', 'baz']
operator.itemgetter(2)(a)
```

What do `with`-statements do?
Context management.

How do you define a context manager?
Make a class with `__enter__()` and `__exit__()`
or use the [`contextlib`](https://docs.python.org/3/library/contextlib.html) library.

What does the else clause in a `try ...` statement do?
It is code that is executed when no error has occured.
It is optional.
It is better to place code in the `else` clause then in the `try` part,
to better be able to locate where the error has occurred,
and to not catch the wrong kind of exception.

What does the finally clause do in a `try ...` statement?
A *finally clause* is always executed before leaving the try statement, whether an exception has occurred or not. When an exception has occurred in the try clause and has not been handled by an except clause (or it has occurred in an except or else clause), it is re-raised after the finally clause has been executed. The finally clause is also executed “on the way out” when any other clause of the try statement is left via a break, continue or return statement.

Raise an exception.
``` python
raise Exception('bad arg') # Here `Exception` is a class.
```

Handle a specific exception.
``` python
try:
  raise Bam()
except Bam as e: # Bam is the class of the exception (defined as `class Bam(Exception): ...`)
  print(e)
```

Handle several specific exceptions.
```python
except (RuntimeError, TypeError, NameError):
    pass
```

Catch-all handler (catch any kind of exception).
``` python
try:
  risky()
except:
  print('risky failed')
```

Define a new exception.
``` python
class Bam(Exception):
  def __init__(self):
    super(Bam, self).__init__('bam!')
```

How do you get the identity of an object in python? What is it?
`id(obj)`
Every object in python has an identity, a type and a value.
The identity never changes and you can think of it as the object's address in memory.

How do you get the type of an object in python?
`type(obj)`

How do you define a destructor of a class?
Give it a `__del__` method.

Check that two objects are the same (have the same identities; not just that their values are the same).
Use `is` instead of `==` ( `is` is for identity `==` is for value).

How do you open a file for reading and writing? To append?
For reading and writing: `open(filename, "r+")`.
For reading and writing if the file possibly does not exist: `open(filename, "r+")`.
For appending: `open(filename, "a")`.

How do you read a file and then overwrite it?
```python
with open(filename, "r+") as f:
    data = f.read()
    f.seek(0)
    f.write(output)
    f.truncate()
```

Turn a value into a boolean.
`bool(val)`

How do you start to debug a python program?
`python -m pdb programtodebug.py`;
or place a breakpoint in the code:
`import pdb; pdb.set_trace`
or (in python >= 3.7) `breakpoint()`;
or post-mortem: `pdb.pm()`;
or from repl: `pdb.run('mymodule.test()')`.

Split an file name into the base name and the file extension.
`os.path.splitext('somefile.ext') => ('somefile', '.ext')`.

Get the base name of a file name.
`os.path.basename(filename)`

What is the syntax for an `if`-expressions (not `if`-statements)?
`expression_if_true if condition else expression_if_false`

How do you test whether an object/class instance has an attribute? How do you get it (with a default value)?
`hasattr(obj, 'someattribute')`
and
`getattr(obj, 'someattribute', defaultvalue)`
